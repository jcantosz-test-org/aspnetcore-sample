name: Get Next Version (Windows)

on:
  workflow_call:
    inputs:
      TAG_PREFIX:
        required: false
        type: string
        default: "v"
      TAG_FORMAT:
        required: false
        type: string
        default: '[0-9]+$'
    secrets:
      GH_TOKEN:
        required: true
    outputs:
      NEXT_VERSION:
        description: "The next version to release"
        value: ${{ jobs.create-version.outputs.NEXT_VERSION }}

jobs:
  create-version:
    runs-on: windows-2019
    environment: ${{ inputs.ENVIRONMENT }}
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    outputs:
      NEXT_VERSION: ${{ steps.get-next-version.outputs.NEXT_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - name: get next version
        id: get-next-version
        run: |
          git fetch --tags
          $TAGS=(git tag)

          # Figure out how many fields the tag format has based on the number of dots in it (min of 0 and max of 3 dots is supported)
          $NUM_FIELDS = ("${{ INPUTS.TAG_FORMAT }}".ToCharArray() | Where-Object {$_ -eq "."}).Count + 1

          # Convert each tag to a powershell "version" and sort
          $CURR_TAGS=$($TAGS | select-string "${{ inputs.TAG_PREFIX }}${{ inputs.TAG_FORMAT }}" | ForEach-Object -Process { $_.toString().trimStart("${{ inputs.TAG_PREFIX }}")} | ForEach-Object -Process {[Version]$_} | sort-object -Descending)

          # Use default tag if there are no tags on this repo yet
          if($CURR_TAGS.Count -eq 0){
             $CURR_TAG = [Version]::new(0,0,0,0)
          } else {
            $CURR_TAG = $CURR_TAGS[0]
          }

          # Increment the least significate portion of the tag (humans can bump more significate parts if desired, but automation never will with this)
          switch($NUM_FIELDS){
            1 { $NEW_TAG = [Version]::new( $CURR_TAG.Major+1, 0, 0, 0 )}
            2 { $NEW_TAG = [Version]::new( $CURR_TAG.Major, $CURR_TAG.Minor+1, 0, 0 )}
            3 { $NEW_TAG = [Version]::new( $CURR_TAG.Major, $CURR_TAG.Minor, $CURR_TAG.Build+1, 0 )}
            default { $NEW_TAG = [Version]::new( $CURR_TAG.Major, $CURR_TAG.Minor, $CURR_TAG.Build, $CURR_TAG.REVISION+1 )}
          }
          
          $NEXT_VERSION = $NEW_TAG.ToString($NUM_FIELDS)

          # Set as output
          echo $NEXT_VERSION
          echo "NEXT_VERSION=$NEXT_VERSION" >> $env:GITHUB_OUTPUT


          # For Semvers
          # $CURR_TAG=(git tag | select-string "v[0-9]+" | ForEach-Object -Process { [Version]$_.toString().trimStart("v")} | sort-object -Descending)[0] || [Version]"0.0.0"
          # $CURR_TAG=[Version]::new($CURR_TAG.Major, $CURR_TAG.Minor, $CURR_TAG.Build + 1)


